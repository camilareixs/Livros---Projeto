import React from 'react';
import {
  TextInput,
  Text,
  View,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  FlatList,
  Image,
} from 'react-native';
import { NavigationContainer } from '@react-navigation/native';  // Importando para navegação entre telas
import { createStackNavigator } from '@react-navigation/stack'; // Usando navegação com pilha de telas
import AsyncStorage from '@react-native-async-storage/async-storage';  // Para armazenamento local de dados
import { Audio } from 'expo-av'; // Para manipulação de áudio

const Stack = createStackNavigator(); // Criação da pilha de navegação

// Tela inicial de boas-vindas
class Welcome extends React.Component {
  render() {
    return (
      <View style={styles.welcomeContainer}>
        {/* Exibe a imagem de boas-vindas */}
        <Image source={require('./abc.png')} style={styles.image} />
        <Text style={styles.welcomeText}>
          Uma rede social para quem quer dar play nos livros, virar pagina nos filmes e assistir as musicas!
        </Text>
        {/* Botões de navegação */}
        <TouchableOpacity
          style={styles.button}
          onPress={() => this.props.navigation.navigate('Login')} // Navega para a tela de login
        >
          <Text style={styles.buttonText}>Login</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.button}
          onPress={() => this.props.navigation.navigate('Cadastro')} // Navega para a tela de cadastro
        >
          <Text style={styles.buttonText}>Cadastro</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.button}
          onPress={() => this.props.navigation.navigate('Sobre')} // Navega para a tela "Sobre"
        >
          <Text style={styles.buttonText}>Sobre</Text>
        </TouchableOpacity>
      </View>
    );
  }
}

// Tela de login
class Principal extends React.Component {
  constructor(props) {
    super(props);
    this.state = { usuario: '', senha: '', sound: null };  // Definindo estado inicial
  }

  // Função para tocar o som de erro
  async playErrorSound() {
    try {
      const { sound } = await Audio.Sound.createAsync(
        require('./erro.mp3') // Carrega o arquivo de som
      );
      this.setState({ sound }); // Armazena o objeto de som no estado
      await sound.playAsync(); // Reproduz o som
    } catch (error) {
      console.log('Erro ao carregar o som:', error); // Caso ocorra erro
    }
  }

  // Função para verificar o login
  async ler() {
    try {
      let senha = await AsyncStorage.getItem(this.state.usuario); // Tenta obter senha do AsyncStorage
      if (senha && senha === this.state.senha) { // Se a senha bater
        this.goToBusca(); // Vai para a tela de busca
      } else {
        alert(senha ? 'Senha Incorreta!' : 'Usuário não encontrado!');
        this.playErrorSound(); // Toca o som de erro se falhar
      }
    } catch (erro) {
      console.log(erro); // Se ocorrer erro na leitura do AsyncStorage
    }
  }

  // Navega para a tela de busca de livros
  goToBusca() {
    this.props.navigation.replace('BuscarLivro');  // Substitui a tela atual pela de busca
  }

  render() {
    return (
      <ScrollView contentContainerStyle={styles.container}>
        {/* Inputs de login */}
        <Text style={styles.label}>Usuário:</Text>
        <TextInput
          style={styles.input}
          onChangeText={(texto) => this.setState({ usuario: texto })} // Atualiza o estado com o texto
        />
        <Text style={styles.label}>Senha:</Text>
        <TextInput
          style={styles.input}
          secureTextEntry
          onChangeText={(texto) => this.setState({ senha: texto })} // Atualiza o estado com a senha
        />
        {/* Botão de login */}
        <TouchableOpacity style={styles.button} onPress={() => this.ler()}> 
          <Text style={styles.buttonText}>Logar</Text>
        </TouchableOpacity>
        {/* Botão para cadastro */}
        <TouchableOpacity
          onPress={() => this.props.navigation.navigate('Cadastro')}
        >
          <Text style={styles.switchText}>Não tem uma conta? Cadastre-se</Text>
        </TouchableOpacity>
      </ScrollView>
    );
  }
}

// Tela de cadastro de novo usuário
class Cadastro extends React.Component {
  constructor(props) {
    super(props);
    this.state = { usuario: '', senha: '' };  // Define os campos para usuário e senha
  }

  // Função para gravar o usuário e senha no AsyncStorage
  async gravar() {
    try {
      await AsyncStorage.setItem(this.state.usuario, this.state.senha); // Armazena no AsyncStorage
      alert('Usuário cadastrado com sucesso!'); // Exibe mensagem de sucesso
    } catch (erro) {
      alert('Erro ao cadastrar!'); // Exibe erro se falhar
    }
  }

  render() {
    return (
      <ScrollView contentContainerStyle={styles.container}>
        {/* Campos de cadastro */}
        <Text style={styles.label}>Nome de usuário:</Text>
        <TextInput
          style={styles.input}
          onChangeText={(texto) => this.setState({ usuario: texto })}
        />
        <Text style={styles.label}>Senha:</Text>
        <TextInput
          style={styles.input}
          secureTextEntry
          onChangeText={(texto) => this.setState({ senha: texto })}
        />
        {/* Botão de cadastro */}
        <TouchableOpacity style={styles.button} onPress={() => this.gravar()}>
          <Text style={styles.buttonText}>Cadastrar</Text>
        </TouchableOpacity>
        {/* Botão para voltar ao login */}
        <TouchableOpacity
          onPress={() => this.props.navigation.navigate('Login')}
        >
          <Text style={styles.switchText}>Já tem uma conta? Faça login</Text>
        </TouchableOpacity>
      </ScrollView>
    );
  }
}

// Tela de busca de livros
class BuscarLivro extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      livros: [/* Lista de livros */],
      searchText: '', // Texto de pesquisa
    };
  }

  // Função para filtrar os livros com base no texto da pesquisa
  filtrarLivros() {
    const { searchText, livros } = this.state;
    if (searchText === '') return livros; // Se não houver texto, retorna todos os livros
    return livros.filter((livro) =>
      livro.titulo.toLowerCase().includes(searchText.toLowerCase()) // Filtra pelo título
    );
  }

  render() {
    return (
      <View style={styles.container}>
        <TextInput
          style={styles.searchInput}
          placeholder="Buscar livro..."
          placeholderTextColor="#aaa"
          onChangeText={(text) => this.setState({ searchText: text })} // Atualiza o estado com o texto de pesquisa
          value={this.state.searchText} // Exibe o texto de pesquisa
        />
        <FlatList
          data={this.filtrarLivros()} // Passa a lista filtrada para a FlatList
          keyExtractor={(item) => item.titulo}
          renderItem={({ item }) => (
            <TouchableOpacity
              style={styles.item}
              onPress={() =>
                this.props.navigation.navigate('DetalhesLivro', { livro: item }) // Navega para detalhes do livro
              }>
              <Text style={styles.itemText}>{item.titulo}</Text>
            </TouchableOpacity>
          )}
        />
      </View>
    );
  }
}

// Tela com informações sobre o app
class SobreOApp extends React.Component {
  render() {
    return (
      <View style={styles.container}>
        <Image
          source={require('./abc.png')} 
          style={styles.image}
        />
        
        <Text style={styles.text}>
          Se você ama ler, assistir filmes e ouvir músicas, já deve ter pensado: "Por que não juntar tudo isso?" 
          Pois bem, aqui é o lugar para fazer isso!
        </Text>
        
        <Text style={styles.text}>
          É super simples: cadastre-se, faça login e use a barra de pesquisa para buscar o livro que você está lendo 
          ou quer ler. Aí, surgem nossas sugestões de músicas, filmes e o melhor: você pode comentar, trocar ideias 
          e ainda descobrir novas sugestões de outras pessoas.
        </Text>
      </View>
    );
  }
}

// Tela de detalhes do livro, onde os usuários podem adicionar comentários
class DetalhesLivro extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      comentario: '',
      comentarios: [],
      usuario: '', // Armazenando o usuário
    };
  }

  // Função para gerar uma chave única para cada livro
  getChaveLivro = () => {
    const { livro } = this.props.route.params;
    return `comentarios_${livro.titulo}`; // A chave é baseada no título do livro
  };

  // Função para adicionar um comentário ao livro
  adicionarComentario = async () => {
    const { comentario, comentarios } = this.state;
    if (comentario.trim() !== '') {
      const novosComentarios = [...comentarios, comentario]; // Adiciona o novo comentário
      this.setState({ comentarios: novosComentarios, comentario: '' }); // Atualiza o estado com os novos comentários

      try {
        await AsyncStorage.setItem(this.getChaveLivro(), JSON.stringify(novosComentarios)); // Salva os comentários no AsyncStorage
      } catch (error) {
        console.log('Erro ao salvar os comentários:', error); // Em caso de erro
      }
    }
  };

  // Carrega os comentários ao carregar a tela
  async componentDidMount() {
    try {
      const comentariosSalvos = await AsyncStorage.getItem(this.getChaveLivro());
      if (comentariosSalvos) {
        this.setState({ comentarios: JSON.parse(comentariosSalvos) }); // Atualiza os comentários se existirem
      }
    } catch (error) {
      console.log('Erro ao carregar os comentários:', error);
    }
  }

  render() {
    const { livro } = this.props.route.params;
    const { comentario, comentarios } = this.state;

    return (
      <View style={styles.detalhesContainer}>
        <Text style={styles.detalhesText}>{livro.titulo}</Text>
        <Text style={styles.recommendationTitle}>Música com a mesma vibe:</Text>
        <Text style={styles.recommendationText}>{livro.musica}</Text>
        <Text style={styles.recommendationTitle}>Filme com a mesma temática:</Text>
        <Text style={styles.recommendationText}>{livro.filme}</Text>
        <Text style={styles.recommendationTitle}>Agora é a sua vez de dar pitaco:</Text>
        <TextInput
          style={styles.commentInput}
          onChangeText={(text) => this.setState({ comentario: text })}
          value={comentario}
        />
        <TouchableOpacity style={styles.button} onPress={this.adicionarComentario}>
          <Text style={styles.buttonText}>Comentar</Text>
        </TouchableOpacity>

        <Text style={styles.recommendationTitle}>Comentários:</Text>
        <FlatList
          data={comentarios}
          keyExtractor={(item, index) => index.toString()}
          renderItem={({ item }) => <Text style={styles.comment}>{item}</Text>}
        />
      </View>
    );
  }
}


const App = () => (
  <NavigationContainer>
    <Stack.Navigator>
      <Stack.Screen
        name="Welcome"
        component={Welcome}
        options={{ headerShown: false }}
      />
      <Stack.Screen
        name="Login"
        component={Principal}
        options={{ headerShown: true }}
      />
      <Stack.Screen
        name="Cadastro"
        component={Cadastro}
        options={{ headerShown: true }}
      />
      <Stack.Screen
        name="Sobre"
        component={SobreOApp}
        options={{ headerShown: true }}
      />
      <Stack.Screen
        name="DetalhesLivro"
        component={DetalhesLivro}
        options={{ headerShown: true }}
      />
      <Stack.Screen
        name="BuscarLivro"
        component={BuscarLivro}
        options={{ headerShown: true }}
      />
    </Stack.Navigator>
  </NavigationContainer>
);

const styles = StyleSheet.create({
   welcomeContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#d1c4e9', 
  },
  image: {
    width: 150,
    height: 150,
    marginBottom: 20,
    alignSelf: 'center',
  },
  welcomeText: {
    fontFamily: 'Roboto',
    fontSize: 15,
    fontWeight: 'bold',
    color: '#3f0357', 
    textAlign: 'center',
    marginBottom: 20,
  },
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 16,
    backgroundColor: '#d1c4e9', 
  },
  label: {
    marginBottom: 8,
    fontSize: 18,
    fontWeight: 'bold',
    color: '#7b008a', 
  },
  input: {
    height: 50,
    borderColor: '#7b008a', 
    borderWidth: 1,
    borderRadius: 20,
    paddingLeft: 20,
    marginBottom: 16,
    backgroundColor: '#ffffff', 
    color: '#3f0357', 
  },
  button: {
    backgroundColor: '#825096', 
    width: 150, 
    height: 50,
    borderRadius: 20,
    paddingVertical: 12,
    paddingHorizontal: 32,
    justifyContent: 'center',
    marginBottom: 16,
    alignItems: 'center',
    alignSelf: 'center',
  },
  buttonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  switchText: {
    color: '#7b008a',
    fontSize: 16,
    textAlign: 'center',
    marginTop: 16,
  },
  searchInput: {
    height: 50,
    borderColor: '#7b008a', 
    borderWidth: 1,
    borderRadius: 20,
    paddingLeft: 20,
    marginBottom: 16,
    backgroundColor: '#ffffff',
    color: '#3f0357',
  },
  item: {
    backgroundColor: '#ffffff', 
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  itemText: {
    color: '#3f0357', 
    fontSize: 16,
  },
  recommendationTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#7b008a',
    marginTop: 16,
  },
  recommendationText: {
    fontSize: 16,
    color: '#3f0357',
    marginBottom: 16,
  },
  commentInput: {
    height: 50,
    borderColor: '#7b008a',
    borderWidth: 1,
    borderRadius: 25,
    paddingLeft: 20,
    marginBottom: 16,
    backgroundColor: '#ffffff',
    color: '#3f0357',
  },
  commentText: {
    fontSize: 16,
    color: '#3f0357',
  },
  detalhesContainer: {
    flex: 1,
    justifyContent: 'center',
    padding: 16,
    backgroundColor: '#d1c4e9', 
  },
  detalhesText: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#3f0357',
    textAlign: 'center',
    marginBottom: 16,
  },
  text: {
    fontSize: 16,
    color: '#3f0357',
    textAlign: 'center',
    marginBottom: 16,
  },
});

export default App;
